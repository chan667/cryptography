#include <stdio.h>
#include <string.h>
#include <ctype.h>

// Compute a^(-1) mod m using brute-force
int modInverse(int a, int m) {
    a = a % m;
    for (int x = 1; x < m; x++)
        if ((a * x) % m == 1)
            return x;
    return -1; // No inverse
}

// Convert char to 0-25 index
int charToIndex(char c) {
    return toupper(c) - 'A';
}

// Convert index 0-25 to char
char indexToChar(int i, int isUpper) {
    return (isUpper ? 'A' : 'a') + i;
}

int main() {
    char ciphertext[] = "B TJNQMF NFTTBHF FODSZQUFE CZ BGGJOE DJQIFS"; // Example
    int c1 = charToIndex('B'); // most frequent cipher letter
    int c2 = charToIndex('U'); // second most frequent cipher letter
    int p1 = charToIndex('E'); // guess for most common plaintext letter
    int p2 = charToIndex('T'); // second guess

    int a, b, a_inv;
    int diff_p = (p2 - p1 + 26) % 26;
    int diff_c = (c2 - c1 + 26) % 26;

    // Solve: diff_c = a * diff_p mod 26
    a = -1;
    for (int i = 1; i < 26; i++) {
        if ((i * diff_p) % 26 == diff_c && modInverse(i, 26) != -1) {
            a = i;
            break;
        }
    }

    if (a == -1) {
        printf("No valid 'a' found.\n");
        return 1;
    }

    b = (c1 - a * p1 + 26 * 26) % 26; // avoid negative with large mod
    a_inv = modInverse(a, 26);

    printf("Found keys: a = %d, b = %d, a_inv = %d\n", a, b, a_inv);
    printf("Decrypted text:\n");

    // Decrypt
    for (int i = 0; ciphertext[i]; i++) {
        char ch = ciphertext[i];
        if (isalpha(ch)) {
            int C = charToIndex(ch);
            int P = (a_inv * (C - b + 26)) % 26;
            printf("%c", indexToChar(P, isupper(ch)));
        } else {
            printf("%c", ch);
        }
    }

    printf("\n");
    return 0;
}
