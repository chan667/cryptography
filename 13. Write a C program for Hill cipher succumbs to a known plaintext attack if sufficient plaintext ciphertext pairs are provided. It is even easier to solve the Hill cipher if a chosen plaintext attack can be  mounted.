#include <stdio.h>

// Mod 26 inverse
int modInverse(int a) {
    a = a % 26;
    for (int x = 1; x < 26; x++)
        if ((a * x) % 26 == 1)
            return x;
    return -1;
}

int main() {
    // Plaintext pairs: HE = [7,4], LP = [11,15]
    // Ciphertext pairs: XM = [23,12], CK = [2,10]
    int P[2][2] = {{7, 11}, {4, 15}};
    int C[2][2] = {{23, 2}, {12, 10}};

    // Inverse of P
    int det = (P[0][0]*P[1][1] - P[0][1]*P[1][0]) % 26;
    if (det < 0) det += 26;
    int detInv = modInverse(det);
    if (detInv == -1) {
        printf("Matrix not invertible.\n");
        return 1;
    }

    int Pinv[2][2] = {
        {(P[1][1] * detInv) % 26, (-P[0][1] * detInv + 26) % 26},
        {(-P[1][0] * detInv + 26) % 26, (P[0][0] * detInv) % 26}
    };

    // Multiply C × P⁻¹ mod 26
    int K[2][2];
    for (int i = 0; i < 2; i++)
        for (int j = 0; j < 2; j++)
            K[i][j] = (C[i][0]*Pinv[0][j] + C[i][1]*Pinv[1][j]) % 26;

    // Output recovered key
    printf("Recovered key matrix:\n");
    printf("%d %d\n%d %d\n", K[0][0], K[0][1], K[1][0], K[1][1]);

    return 0;
}
