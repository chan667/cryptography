#include <stdio.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>

#define MAX_LEN 1000
#define NUM_SHIFTS 26

// English letter frequencies from 'a' to 'z'
double english_freq[26] = {
    8.167, 1.492, 2.782, 4.253, 12.702, 2.228, 2.015,
    6.094, 6.966, 0.153, 0.772, 4.025, 2.406, 6.749,
    7.507, 1.929, 0.095, 5.987, 6.327, 9.056,
    2.758, 0.978, 2.360, 0.150, 1.974, 0.074
};

typedef struct {
    int shift;
    double score;
    char plaintext[MAX_LEN];
} Candidate;

// Score decrypted text using English letter frequencies
double score_text(const char* text) {
    double score = 0.0;
    for (int i = 0; text[i]; i++) {
        if (isalpha(text[i])) {
            int index = tolower(text[i]) - 'a';
            score += english_freq[index];
        }
    }
    return score;
}

// Decrypt using Caesar shift
void decrypt(const char* ciphertext, int shift, char* result) {
    for (int i = 0; ciphertext[i]; i++) {
        if (isalpha(ciphertext[i])) {
            char base = isupper(ciphertext[i]) ? 'A' : 'a';
            result[i] = ((ciphertext[i] - base - shift + 26) % 26) + base;
        } else {
            result[i] = ciphertext[i];
        }
    }
    result[strlen(ciphertext)] = '\0';
}

// Compare candidates by score (descending)
int compare_candidates(const void* a, const void* b) {
    double diff = ((Candidate*)b)->score - ((Candidate*)a)->score;
    return (diff > 0) - (diff < 0);
}

int main() {
    char ciphertext[MAX_LEN];
    int top_n;

    printf("Enter ciphertext: ");
    fgets(ciphertext, MAX_LEN, stdin);
    ciphertext[strcspn(ciphertext, "\n")] = '\0';  // Remove newline

    printf("How many top plaintexts to display? ");
    scanf("%d", &top_n);

    Candidate candidates[NUM_SHIFTS];

    // Try all 26 shifts
    for (int shift = 0; shift < 26; shift++) {
        decrypt(ciphertext, shift, candidates[shift].plaintext);
        candidates[shift].shift = shift;
        candidates[shift].score = score_text(candidates[shift].plaintext);
    }

    // Sort by score descending
    qsort(candidates, NUM_SHIFTS, sizeof(Candidate), compare_candidates);

    // Show top N results
    printf("\nTop %d plaintext guesses:\n", top_n);
    for (int i = 0; i < top_n && i < NUM_SHIFTS; i++) {
        printf("Shift %2d | Score: %5.2f | %s\n",
            candidates[i].shift,
            candidates[i].score,
            candidates[i].plaintext);
    }

    return 0;
}
